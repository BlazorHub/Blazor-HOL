@using Syncfusion.Blazor;
@using Syncfusion.Blazor.Data;
@using Newtonsoft.Json
@using SyncfusionLab.Data
@using SyncfusionLab.Services
@using SyncfusionLab.RazorModels
@using SyncfusionLab.Helpers
@using EFCoreModel.Models
@using AutoMapper
@using SyncfusionLab.AdaptorModels
@inherits DataAdaptor<IDepartmentService>
@inject IMapper Mapper
@inject IPersonService PersonService

<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    [JsonIgnore]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public SortCondition CurrentSortCondition { get; set; }

    /// <summary>
    /// 透過 Service 使用 Entity Framework Core 來讀取資料庫內的紀錄出來
    /// </summary>
    /// <param name="dataManagerRequest"></param>
    /// <param name="key"></param>
    /// <returns></returns>
    public override async Task<object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
    {
        IQueryable<Department> DataSource = await Service.GetAsync();
        if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
        {
            // 進行搜尋動作
            DataSource = DataOperations.PerformSearching(DataSource, dataManagerRequest.Search);
        }

        #region 進行排序動作
        if (CurrentSortCondition != null)
        {
            if (CurrentSortCondition.Id == (int)DepartmentEnum.NameAscending)
            {
                DataSource = DataSource.OrderBy(x => x.Name);
            }
            else if (CurrentSortCondition.Id == (int)DepartmentEnum.NameDescending)
            {
                DataSource = DataSource.OrderByDescending(x => x.Name);
            }
            else if (CurrentSortCondition.Id == (int)DepartmentEnum.BudgetAscending)
            {
                DataSource = DataSource.OrderBy(x => x.Budget);
            }
            else if (CurrentSortCondition.Id == (int)DepartmentEnum.BudgetDescending)
            {
                DataSource = DataSource.OrderByDescending(x => x.Budget);
            }
            else
            {
                DataSource = DataSource.OrderBy(x => x.Name);
            }
        }
        #endregion

        //if (dataManagerRequest.Sorted != null && dataManagerRequest.Sorted.Count > 0)
        //{
        //    // 進行排序動作
        //    DataSource = DataOperations.PerformSorting(DataSource, dataManagerRequest.Sorted);
        //}
        //else
        //{
        //    // 進行預設排序
        //    DataSource = DataSource.OrderBy(x => x.Name);
        //}

        if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
        {
            // 進行過濾動作
            DataSource = DataOperations.PerformFiltering(DataSource, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
        }

        // 取得記錄總數量，將要用於分頁元件面板使用
        int count = DataSource.Cast<Department>().Count();

        #region 進行分頁處理
        if (dataManagerRequest.Skip != 0)
        {
            //分頁
            DataSource = DataOperations.PerformSkip(DataSource, dataManagerRequest.Skip);
        }
        if (dataManagerRequest.Take != 0)
        {
            DataSource = DataOperations.PerformTake(DataSource, dataManagerRequest.Take);
        }
        #endregion

        #region 想要做 Table Join 的查詢，也可以在這裡進行呼叫

        #endregion

        List<DepartmentAdaptorModel> adaptorModelObjects =
        Mapper.Map<List<DepartmentAdaptorModel>>(DataSource);


        #region 在這裡進行 轉接器 資料模型 的額外屬性初始化
        foreach (var adaptorModelItem in adaptorModelObjects)
        {
            if (adaptorModelItem.Administrator.HasValue)
            {
                var itemReference = await PersonService.GetAsync(adaptorModelItem.Administrator.Value);
                if (itemReference != null)
                {
                    adaptorModelItem.FullName = $"{itemReference.FirstName} {itemReference.LastName}";
                }
            }
        }
        #endregion

        var item = dataManagerRequest.RequiresCounts
        ? new DataResult() { Result = adaptorModelObjects, Count = count }
        : (object)adaptorModelObjects;
        await Task.Yield();
        return item;
    }
}