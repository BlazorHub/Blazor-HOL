@using System.Threading
@using MatBlazorLab.Adaptors
@using MatBlazorLab.Services
@using EFCoreModel.Models
@using AutoMapper
@using MatBlazorLab.AdaptorModels
@using MatBlazorLab.Components.Commons
@using MatBlazorLab.Components.Pickers
@inject IStudentGradeService CurrentService
@inject StudentGradeAdaptor StudentGradeAdaptor
@inject IMapper mapper
@using MatBlazor

<div>
    @if (CombineWithHeaderMode == false)
    {
        <button class="btn btn-primary" @onclick="x => ShowAontherRecordPicker = true">選取課程</button>
        <span>@Header.Title</span>
    }
    else
    {
        <h1>@Header.Title</h1>
    }
</div>

@if (Header.IsExistCourse() == true || CombineWithHeaderMode == false)
{
    <button class="btn btn-primary" @onclick="AddNewRecord">新增</button>
    <MatTable Items="@Items" AllowSelection="true" PageSize="DataManagerRequest.PageSize"
              ShowPaging="false" SelectionChanged="SelectionChanged"
              class="mat-elevation-z5">
        <MatTableHeader>
            <th>分數</th>
            <th>學生</th>
            <th>功能</th>
        </MatTableHeader>
        <MatTableRow>
            <td><p style="width:100px">@context.Grade</p></td>
            <td><p style="width:200px">@context.StudentName</p></td>
            <td>
                <button class="btn btn-primary" @onclick="x=>UpdateRecord(context)">修改</button>
                <button class="btn btn-danger" @onclick="x=>DeleteRecord(context)">刪除</button>
            </td>
        </MatTableRow>
    </MatTable>
    <div>
        <MatPaginator @ref="PaginatorComponent" Length="DataManagerRequest.RecordLength"
                      PageSize="DataManagerRequest.PageSize"
                      Page="PageChanged" PageIndexChanged="IndexChanged"
                      PageSizeOptions="DataManagerRequest.PageSizeOptions"></MatPaginator>
    </div>
}

<MatDialog @bind-IsOpen="@dialogIsOpen">
    <MatDialogTitle>@EditRecordDialogTitle</MatDialogTitle>
    <MatDialogContent>
        <div style="width:500px;height:400px">
            <EditForm Model="CurrentRecord">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <InputWatcher EditContextActionChanged="OnEditContestChanged" />

                <div class="form-group col">
                    <label class="control-label">分數</label>
                    <InputNumber class="form-control" @bind-Value="CurrentRecord.Grade"></InputNumber>
                    <ValidationMessage For="@(() => CurrentRecord.Grade)" />
                </div>

                <div class="form-group col">
                    <label class="control-label">學生 <span class="oi oi-question-mark" @onclick="OnOpenPicker"></span></label>
                    <InputText class="form-control"
                               @bind-Value="CurrentRecord.StudentName" Enabled="false"></InputText>
                </div>

            </EditForm>
        </div>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { dialogIsOpen = false; })">取消</MatButton>
        <MatButton OnClick="@OnRecordEditConfirm">儲存</MatButton>
    </MatDialogActions>

</MatDialog>

<PickPerson OpenPicker="ShowAontherRecordPicker" OnConfirmCallback="x=>OnPickerCompletion(x)"></PickPerson>

<MessageBox Width="@MessageBoxWidth" Height="@MessageBoxHeight"
            Title="@MessageBoxTitle" Body="@MessageBoxBody" DialogIsOpen="MessageBoxIsOpen"
            PressOKCallback="x => MessageBoxIsOpen = false" />
<ConfirmBox Width="@ConfirmBoxWidth" Height="@ConfirmBoxHeight"
            Title="@ConfirmBoxTitle" Body="@ConfirmBoxBody" DialogIsOpen="ConfirmBoxIsOpen"
            Callback="RemoveThisRecord" />

@code{
    MatPaginator PaginatorComponent;
    public List<StudentGradeAdaptorModel> Items { get; set; } = new List<StudentGradeAdaptorModel>();
    public DataManagerRequest DataManagerRequest { get; set; } = new DataManagerRequest();
    public StudentGradeAdaptorModel CurrentRecord { get; set; } = new StudentGradeAdaptorModel();
    public StudentGradeAdaptorModel CurrentEditRecord { get; set; } = new StudentGradeAdaptorModel();
    public StudentGradeAdaptorModel CurrentSelectedRecord { get; set; }
    bool dialogIsOpen = false;
    public EditContext LocalEditContext { get; set; }
    bool isNewRecordMode;
    public string MessageBoxTitle { get; set; }
    public string MessageBoxBody { get; set; }
    public bool MessageBoxIsOpen { get; set; }
    public string MessageBoxHeight { get; set; } = "300px";
    public string MessageBoxWidth { get; set; } = "400px";
    public string ConfirmBoxTitle { get; set; }
    public string ConfirmBoxBody { get; set; }
    public string ConfirmBoxHeight { get; set; } = "300px";
    public string ConfirmBoxWidth { get; set; } = "400px";
    public bool ConfirmBoxIsOpen { get; set; }
    public bool ShowAontherRecordPicker { get; set; } = false;
    public string EditRecordDialogTitle { get; set; } = "";
    public CourseAdaptorModel Header { get; set; } = new CourseAdaptorModel();

    [Parameter]
    public EventCallback<StudentGradeAdaptorModel> SelectedRecordChanged { get; set; }
    [Parameter]
    public bool CombineWithHeaderMode { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        DataManagerRequest.ChangePageSize(10);
        DataManagerRequest.GoFirstPage();
        StudentGradeAdaptor.HeaderID = -1;
        await Refresh();
    }
    protected override void OnAfterRender(bool firstRender)
    {
    }
    async Task PageChanged(MatPaginatorPageEvent args)
    {
        DataManagerRequest.GotoPage(args.PageIndex + 1);
        await Refresh();
    }
    public async Task Refresh()
    {
        var reslut = await StudentGradeAdaptor.ReadAsync(DataManagerRequest) as DataResult<StudentGradeAdaptorModel>;
        DataManagerRequest.RecordLength = reslut.Count;
        Items = reslut.Result as List<StudentGradeAdaptorModel>;
    }
    void IndexChanged(int index)
    {

    }
    async void SelectionChanged(object arg)
    {
        CurrentSelectedRecord = arg as StudentGradeAdaptorModel;
        if (SelectedRecordChanged.HasDelegate)
        {
            await SelectedRecordChanged.InvokeAsync(CurrentSelectedRecord);
        }
    }
    void DeleteRecord(StudentGradeAdaptorModel context)
    {
        CurrentEditRecord = context;
        ConfirmBoxWidth = "400px";
        ConfirmBoxHeight = "200px";
        ConfirmBoxTitle = "警告";
        ConfirmBoxBody = "確認要刪除這筆紀錄嗎？";
        ConfirmBoxIsOpen = true;
    }
    public async Task RemoveThisRecord(bool NeedDelete)
    {
        if (NeedDelete == true)
        {
            await CurrentService.DeleteAsync(mapper.Map<StudentGrade>(CurrentEditRecord));
            await Refresh();
        }
        ConfirmBoxIsOpen = false;
    }
    void AddNewRecord()
    {
        EditRecordDialogTitle = "新增紀錄";
        CurrentRecord = new StudentGradeAdaptorModel();
        if (Header.CourseId > 0)
        {
            CurrentRecord.CourseId = Header.CourseId;
            CurrentRecord.CourseTitle = Header.Title;
        }
        isNewRecordMode = true;
        dialogIsOpen = true;
    }
    void UpdateRecord(StudentGradeAdaptorModel context)
    {
        EditRecordDialogTitle = "修改紀錄";
        CurrentEditRecord = context;
        CurrentRecord = CurrentEditRecord.Clone();
        isNewRecordMode = false;
        dialogIsOpen = true;
    }
    public void OnEditContestChanged(EditContext context)
    {
        LocalEditContext = context;
    }
    async Task OnRecordEditConfirm()
    {
        #region 進行 Form Validation 檢查驗證作業
        if (LocalEditContext.Validate() == false)
        {
            return;
        }
        #endregion

        #region 檢查資料完整性
        if (isNewRecordMode == true)
        {
            var checkedResult = await CurrentService
                .BeforeAddCheckAsync(mapper.Map<StudentGrade>(CurrentRecord));
            if (checkedResult == false)
            {
                MessageBoxWidth = "400px";
                MessageBoxHeight = "200px";
                MessageBoxTitle = "警告";
                MessageBoxBody = "該學生已經存在該課程內，無法完成新增";
                MessageBoxIsOpen = true;
                return;
            }
        }
        else
        {
            var checkedResult = await CurrentService
                .BeforeUpdateCheckAsync(mapper.Map<StudentGrade>(CurrentRecord));
            if (checkedResult == false)
            {
                MessageBoxWidth = "400px";
                MessageBoxHeight = "200px";
                MessageBoxTitle = "警告";
                MessageBoxBody = "該學生已經存在該課程內，無法完成修改";
                MessageBoxIsOpen = true;
                return;
            }
        }
        #endregion

        if (dialogIsOpen == true)
        {
            if (isNewRecordMode == true)
            {
                await CurrentService.AddAsync(mapper.Map<StudentGrade>(CurrentRecord));
                await Refresh();
            }
            else
            {
                await CurrentService.UpdateAsync(mapper.Map<StudentGrade>(CurrentRecord));
                await Refresh();
            }
            dialogIsOpen = false;
        }
    }
    #region 開窗選取紀錄使用到的方法
    public void OnOpenPicker()
    {
        ShowAontherRecordPicker = true;
    }

    public void OnPickerCompletion(PersonAdaptorModel e)
    {
        if (e != null)
        {
            CurrentRecord.StudentId = e.PersonId;
            CurrentRecord.StudentName = e.FullName;
        }
        ShowAontherRecordPicker = false;
    }
    public async Task UpdateMasterHeader(CourseAdaptorModel header)
    {
        Header = header;
        StudentGradeAdaptor.HeaderID = Header.CourseId;
        await Task.Delay(100);
        await Refresh();
        // 必須要加入這個方法呼叫，否則，UI 無法更新
        StateHasChanged();
    }

    #endregion

}
